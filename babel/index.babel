// TODO: Remake OOP style with react classes

let boardLength = 40;
let boardWidth = 40;

const Board = React.createClass({
  updateBoard: function (e) {
    this.props.updateBoard([e.target.getAttribute("data-row"), e.target.getAttribute("data-col")])
  },
  configureRow: function configureRow(i) {
    let row = [];
    for (let j = 0; j < this.props.board[i].length; j++) {
      if (this.props.board[i][j] == 1) {
        row.push(<div data-row={i} data-col={j} onClick={this.updateBoard} className="cell live"></div>);
      } else {
        row.push(<div data-row={i} data-col={j} onClick={this.updateBoard} className="cell"></div>);
      }
    }
    return row
  },
  configureRows: function configureRows() {
    let rows = [];
    for(let i = 0; i < this.props.board.length; i++) {
      let row = this.configureRow(i)
      rows.push(
        <div className="row">
          {row}
        </div>
      );
    }
    return rows
  },
  render: function render() {
    let rows = this.configureRows()
    return (
      <div className="board">
        {rows}
      </div>
    )
  }
});

const ButtonGroup = React.createClass({
  render: function render() {
    return (
      <div id="gen" className="gen text-center">
        <p>Generation: {this.props.gen}</p>
        <button onClick={this.props.start} id="start" className="btn btn-control">Start</button>
        <button onClick={this.props.pause} id="pause" className="btn btn-control">Pause</button>
        <button onClick={this.props.reset} id="reset" className="btn btn-control">Reset</button>
        <button onClick={this.props.clear} id="clear" className="btn btn-control">Clear</button>
      </div>
    )
  }
});

const Game = React.createClass({
  getInitialState: function getInitialState () {
    return {
      board: this.initializeBoard(boardLength, boardWidth, 1),
      gen: 0
    }
  },
  componentDidMount: function () {
    this.start();
  },
  initializeBoard: function initializeBoard(length, width, randomize) {
    let theBoard = [];
    for (var i = 0; i < length; i++) {
      theBoard.push([]);
      for (var j = 0; j < width; j++) {
        if (randomize == 0) {
          theBoard[i].push(0);
        } else if (randomize == 1) {
          let randomNum = Math.random();
          if (randomNum > 0.8) {
            theBoard[i].push(1);
          } else {
            theBoard[i].push(0);
          }
        }
      }
    }
    return theBoard
  },
  nextGeneration: function nextGeneration(board) {
    let newBoard = [];
    for (let i = 0; i < board.length; i++) {
      newBoard.push([]);
      for (let j = 0; j < board[i].length; j++) {
        let cell = board[i][j];
        let topCoord = (i == 0) ? (board.length - 1) : (i - 1);
        let botCoord = (i == (board.length - 1)) ? 0 : (i + 1);
        let leftCoord = (j == 0) ? (board[i].length - 1) : (j - 1);
        let rightCoord = (j == (board[i].length - 1)) ? 0 : (j + 1);
        let neighbors = [
          board[topCoord][leftCoord],
          board[topCoord][j],
          board[topCoord][rightCoord],
          board[i][leftCoord],
          board[i][rightCoord],
          board[botCoord][leftCoord],
          board[botCoord][j],
          board[botCoord][rightCoord]
        ];
        let neighborsAliveCount = neighbors.filter(function(neighbor) {
          return neighbor == 1
        }).length;
        if (cell === 1) {
          if (neighborsAliveCount === 2 || neighborsAliveCount === 3) {
            newBoard[i].push(1);
          } else { newBoard[i].push(0) }
        } else {
          if (neighborsAliveCount === 3) {
            newBoard[i].push(1);
          } else { newBoard[i].push(0) }
        }
      }
    }
    return newBoard;
  },
  start: function start() {
    if(this.generationInterval == undefined) {
      let that = this;
      that.generationInterval = setInterval(function () {
        that.setState({
          board: that.nextGeneration(that.state.board),
          gen: that.state.gen += 1
        })
      }, 1000)
    }
  },
  pause: function pause() {
    clearInterval(this.generationInterval);
    this.generationInterval = undefined;
  },
  reset: function reset() {
    clearInterval(this.generationInterval);
    this.generationInterval = undefined;
    this.setState({
      board: this.initializeBoard(boardLength, boardWidth, 1),
      gen: 0
    });
  },
  clear: function clear() {
    clearInterval(this.generationInterval);
    this.generationInterval = undefined;
    this.setState({
      board: this.initializeBoard(boardLength, boardWidth, 0),
      gen: 0
    });
  },
  updateBoard: function updateBoard(coords) {
    let theBoard = this.state.board;
    if (this.state.board[coords[0]][coords[1]] == 1) {
      theBoard[coords[0]][coords[1]] = 0;
      this.setState({
        board: theBoard
      });
    } else {
      theBoard[coords[0]][coords[1]] = 1;
      this.setState({
        board: theBoard
      });
    }
  },
  render: function render () {
    return (
      <div className="wrap">
        <Board board={this.state.board} updateBoard={this.updateBoard.bind(this)} />
        <ButtonGroup gen={this.state.gen}
          start={this.start.bind(this)}
          pause={this.pause.bind(this)}
          reset={this.reset.bind(this)}
          clear={this.clear.bind(this)} />
      </div>
    )
  }
});

ReactDOM.render(<Game />, document.getElementById("game"))
